{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ZL_6GK8qX35J"
   },
   "source": [
    "\n",
    "\n",
    "# Week 1: Multiple Output Models using the Keras Functional API\n",
    "\n",
    "Welcome to the first programming assignment of the course! Your task will be to use the Keras functional API to train a model to predict two outputs. For this lab, you will use the **[Wine Quality Dataset](https://archive.ics.uci.edu/ml/datasets/Wine+Quality)** from the **UCI machine learning repository**. It has separate datasets for red wine and white wine.\n",
    "\n",
    "Normally, the wines are classified into one of the quality ratings specified in the attributes. In this exercise, you will combine the two datasets to predict the wine quality and whether the wine is red or white solely from the attributes. \n",
    "\n",
    "You will model wine quality estimations as a regression problem and wine type detection as a binary classification problem.\n",
    "\n",
    "#### Please complete sections that are marked **(TODO)**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "obdcD6urYBY9"
   },
   "source": [
    "## Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "t8N3pcTQ5oQI"
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Dense, Input\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import itertools\n",
    "\n",
    "import utils"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "gQMERzWQYpgm"
   },
   "source": [
    "## Load Dataset\n",
    "\n",
    "\n",
    "You will now download the dataset from the [UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/index.php). \n",
    "\n",
    "### Pre-process the white wine dataset (TODO)\n",
    "You will add a new column named `is_red` in your dataframe to indicate if the wine is white or red. \n",
    "- In the white wine dataset, you will fill the column `is_red` with  zeros (0)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "2qYAjKXCd4RH",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "cb9f284ba6255170fe04a309a407d72d",
     "grade": false,
     "grade_id": "cell-e5bfa0f152d9a21f",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# URL of the white wine dataset\n",
    "URL = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv'\n",
    "\n",
    "# load the dataset from the URL\n",
    "white_df = pd.read_csv(URL, sep=\";\")\n",
    "\n",
    "# fill the `is_red` column with zeros.\n",
    "white_df[\"is_red\"] = 0\n",
    "\n",
    "# keep only the first of duplicate items\n",
    "white_df = white_df.drop_duplicates(keep='first')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "defe38d6ec58fd31cd67b89e46c4373f",
     "grade": true,
     "grade_id": "cell-30575e713b55fc51",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "# You can click `File -> Open` in the menu above and open the `utils.py` file \n",
    "# in case you want to inspect the unit tests being used for each graded function.\n",
    "\n",
    "utils.test_white_df(white_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "OQHK0ohBQRCk"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.8\n",
      "9.1\n"
     ]
    }
   ],
   "source": [
    "print(white_df.alcohol[0])\n",
    "print(white_df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 8.8\n",
    "# 9.1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pre-process the red wine dataset (TODO)\n",
    "- In the red wine dataset, you will fill in the column `is_red` with ones (1)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "8y3QxKwBed8v",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "be72275f78e2c2d0038dde9aa63f8d4f",
     "grade": false,
     "grade_id": "cell-e47a40f306593274",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# URL of the red wine dataset\n",
    "URL = 'http://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv'\n",
    "\n",
    "# load the dataset from the URL\n",
    "red_df = pd.read_csv(URL, sep=\";\")\n",
    "\n",
    "# fill the `is_red` column with ones.\n",
    "red_df[\"is_red\"] = 1\n",
    "\n",
    "# keep only the first of duplicate items\n",
    "red_df = red_df.drop_duplicates(keep='first')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d8e0c91b0fd668b63ba74a8f2f958b59",
     "grade": true,
     "grade_id": "cell-2a75937adcc0c25b",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_red_df(red_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "zsB3LUzNQpo_"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.4\n",
      "10.2\n"
     ]
    }
   ],
   "source": [
    "print(red_df.alcohol[0])\n",
    "print(red_df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 9.4\n",
    "# 10.2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "2G8B-NYuM6-f"
   },
   "source": [
    "### Concatenate the datasets\n",
    "\n",
    "Next, concatenate the red and white wine dataframes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YpQrOjJbfN3m"
   },
   "outputs": [],
   "source": [
    "df = pd.concat([red_df, white_df], ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Se2dTmThQyjb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.4\n",
      "9.5\n"
     ]
    }
   ],
   "source": [
    "print(df.alcohol[0])\n",
    "print(df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 9.4\n",
    "# 9.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wx6y3rPpQv4k"
   },
   "outputs": [],
   "source": [
    "# NOTE: In a real-world scenario, you should shuffle the data.\n",
    "# YOU ARE NOT going to do that here because we want to test\n",
    "# with deterministic data. But if you want the code to do it,\n",
    "# it's in the commented line below:\n",
    "\n",
    "#df = df.iloc[np.random.permutation(len(df))]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "-EqIcbg5M_n1"
   },
   "source": [
    "This will chart the quality of the wines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "IsvK0-Sgy17C"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['quality'].hist(bins=20);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Nut1rmYLzf-p"
   },
   "source": [
    "### Imbalanced data (TODO)\n",
    "You can see from the plot above that the wine quality dataset is imbalanced. \n",
    "- Since there are very few observations with quality equal to 3, 4, 8 and 9, you can drop these observations from your dataset. \n",
    "- You can do this by removing data belonging to all classes except those > 4 and < 8."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "doH9_-gnf3sz",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "d9ba9fc3a3ca02ccc567be33652b80fe",
     "grade": false,
     "grade_id": "cell-6a3e9db696f6827b",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# get data with wine quality greater than 4 and less than 8\n",
    "df = df[(df['quality'] > 4) & (df['quality'] < 8 )]\n",
    "\n",
    "# reset index and drop the old one\n",
    "df = df.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "281e1d86a4803560ed5892cd7eda4c01",
     "grade": true,
     "grade_id": "cell-aed3da719d4682c7",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_df_drop(df)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "xNR1iAlMRPXO"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9.4\n",
      "10.9\n"
     ]
    }
   ],
   "source": [
    "print(df.alcohol[0])\n",
    "print(df.alcohol[100])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 9.4\n",
    "# 10.9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "cwhuRpnVRTzG"
   },
   "source": [
    "You can plot again to see the new range of data and quality"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "857ygzZiLgGg"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['quality'].hist(bins=20);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "n3k0vqSsp84t"
   },
   "source": [
    "### Train Test Split (TODO)\n",
    "\n",
    "Next, you can split the datasets into training, test and validation datasets.\n",
    "- The data frame should be split 80:20 into `train` and `test` sets.\n",
    "- The resulting `train` should then be split 80:20 into `train` and `val` sets.\n",
    "- The `train_test_split` parameter `test_size` takes a float value that ranges between 0. and 1, and represents the proportion of the dataset that is allocated to the test set.  The rest of the data is allocated to the training set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "PAVIf2-fgRVY",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "7f5738f4fb51d65adc9a8acbdf2b9970",
     "grade": false,
     "grade_id": "cell-91946cadf745206b",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# Please do not change the random_state parameter. This is needed for grading.\n",
    "\n",
    "# split df into 80:20 train and test sets\n",
    "train, test = train_test_split(df, test_size= 0.2, random_state = 1)\n",
    "                               \n",
    "# split train into 80:20 train and val sets\n",
    "train, val = train_test_split(train, test_size=0.2, random_state = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "editable": false,
    "id": "57h9LcEzRWpk",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "42adbe9e66efac7c7a5f8cd73ac92f22",
     "grade": true,
     "grade_id": "cell-64b8b38cd0b965f6",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_data_sizes(train.size, test.size, val.size)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "RwTNu4KFqG-K"
   },
   "source": [
    "Here's where you can explore the training stats. You can pop the labels 'is_red' and 'quality' from the data as these will be used as the labels\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Y_afyhhHM6WQ"
   },
   "outputs": [],
   "source": [
    "train_stats = train.describe()\n",
    "train_stats.pop('is_red')\n",
    "train_stats.pop('quality')\n",
    "train_stats = train_stats.transpose()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ahvbYm4fNqSt"
   },
   "source": [
    "Explore the training stats!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "n_gAtPjZ0otF"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>fixed acidity</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>7.221616</td>\n",
       "      <td>1.325297</td>\n",
       "      <td>3.80000</td>\n",
       "      <td>6.40000</td>\n",
       "      <td>7.00000</td>\n",
       "      <td>7.7000</td>\n",
       "      <td>15.60000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>volatile acidity</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.338929</td>\n",
       "      <td>0.162476</td>\n",
       "      <td>0.08000</td>\n",
       "      <td>0.23000</td>\n",
       "      <td>0.29000</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>1.24000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>citric acid</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.321569</td>\n",
       "      <td>0.147970</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.25000</td>\n",
       "      <td>0.31000</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>1.66000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>residual sugar</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>5.155911</td>\n",
       "      <td>4.639632</td>\n",
       "      <td>0.60000</td>\n",
       "      <td>1.80000</td>\n",
       "      <td>2.80000</td>\n",
       "      <td>7.6500</td>\n",
       "      <td>65.80000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>chlorides</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.056976</td>\n",
       "      <td>0.036802</td>\n",
       "      <td>0.01200</td>\n",
       "      <td>0.03800</td>\n",
       "      <td>0.04700</td>\n",
       "      <td>0.0660</td>\n",
       "      <td>0.61100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>30.388590</td>\n",
       "      <td>17.236784</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>17.00000</td>\n",
       "      <td>28.00000</td>\n",
       "      <td>41.0000</td>\n",
       "      <td>131.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>115.062282</td>\n",
       "      <td>56.706617</td>\n",
       "      <td>6.00000</td>\n",
       "      <td>75.00000</td>\n",
       "      <td>117.00000</td>\n",
       "      <td>156.0000</td>\n",
       "      <td>344.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>density</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.994633</td>\n",
       "      <td>0.003005</td>\n",
       "      <td>0.98711</td>\n",
       "      <td>0.99232</td>\n",
       "      <td>0.99481</td>\n",
       "      <td>0.9968</td>\n",
       "      <td>1.03898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pH</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>3.223201</td>\n",
       "      <td>0.161272</td>\n",
       "      <td>2.72000</td>\n",
       "      <td>3.11000</td>\n",
       "      <td>3.21000</td>\n",
       "      <td>3.3300</td>\n",
       "      <td>4.01000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sulphates</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>0.534051</td>\n",
       "      <td>0.149149</td>\n",
       "      <td>0.22000</td>\n",
       "      <td>0.43000</td>\n",
       "      <td>0.51000</td>\n",
       "      <td>0.6000</td>\n",
       "      <td>1.95000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>alcohol</th>\n",
       "      <td>3155.0</td>\n",
       "      <td>10.504466</td>\n",
       "      <td>1.154654</td>\n",
       "      <td>8.50000</td>\n",
       "      <td>9.50000</td>\n",
       "      <td>10.30000</td>\n",
       "      <td>11.3000</td>\n",
       "      <td>14.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       count        mean        std      min       25%  \\\n",
       "fixed acidity         3155.0    7.221616   1.325297  3.80000   6.40000   \n",
       "volatile acidity      3155.0    0.338929   0.162476  0.08000   0.23000   \n",
       "citric acid           3155.0    0.321569   0.147970  0.00000   0.25000   \n",
       "residual sugar        3155.0    5.155911   4.639632  0.60000   1.80000   \n",
       "chlorides             3155.0    0.056976   0.036802  0.01200   0.03800   \n",
       "free sulfur dioxide   3155.0   30.388590  17.236784  1.00000  17.00000   \n",
       "total sulfur dioxide  3155.0  115.062282  56.706617  6.00000  75.00000   \n",
       "density               3155.0    0.994633   0.003005  0.98711   0.99232   \n",
       "pH                    3155.0    3.223201   0.161272  2.72000   3.11000   \n",
       "sulphates             3155.0    0.534051   0.149149  0.22000   0.43000   \n",
       "alcohol               3155.0   10.504466   1.154654  8.50000   9.50000   \n",
       "\n",
       "                            50%       75%        max  \n",
       "fixed acidity           7.00000    7.7000   15.60000  \n",
       "volatile acidity        0.29000    0.4000    1.24000  \n",
       "citric acid             0.31000    0.4000    1.66000  \n",
       "residual sugar          2.80000    7.6500   65.80000  \n",
       "chlorides               0.04700    0.0660    0.61100  \n",
       "free sulfur dioxide    28.00000   41.0000  131.00000  \n",
       "total sulfur dioxide  117.00000  156.0000  344.00000  \n",
       "density                 0.99481    0.9968    1.03898  \n",
       "pH                      3.21000    3.3300    4.01000  \n",
       "sulphates               0.51000    0.6000    1.95000  \n",
       "alcohol                10.30000   11.3000   14.00000  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "bGPvt9jir_HC"
   },
   "source": [
    "### Get the labels (TODO)\n",
    "\n",
    "The features and labels are currently in the same dataframe.\n",
    "- You will want to store the label columns `is_red` and `quality` separately from the feature columns.  \n",
    "- The following function, `format_output`, gets these two columns from the dataframe (it's given to you).\n",
    "- `format_output` also formats the data into numpy arrays. \n",
    "- Please use the `format_output` and apply it to the `train`, `val` and `test` sets to get dataframes for the labels."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Z_fs14XQqZVP"
   },
   "outputs": [],
   "source": [
    "def format_output(data):\n",
    "    is_red = data.pop('is_red')\n",
    "    is_red = np.array(is_red)\n",
    "    quality = data.pop('quality')\n",
    "    quality = np.array(quality)\n",
    "    return (quality, is_red)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "8L3ZZe1fQicm",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "7a86809e54895a816434c48dc903f55d",
     "grade": false,
     "grade_id": "cell-5c30fa2c2a354b0f",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# format the output of the train set\n",
    "train_Y = format_output(train)\n",
    "\n",
    "# format the output of the val set\n",
    "val_Y = format_output(val)\n",
    "    \n",
    "# format the output of the test set\n",
    "test_Y = format_output(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "359cabbafaed14ec9bbc1e57a7b6f32c",
     "grade": true,
     "grade_id": "cell-4977d8befb80f56b",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_format_output(df, train_Y, val_Y, test_Y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that after you get the labels, the `train`, `val` and `test` dataframes no longer contain the label columns, and contain just the feature columns.\n",
    "- This is because you used `.pop` in the `format_output` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fixed acidity</th>\n",
       "      <th>volatile acidity</th>\n",
       "      <th>citric acid</th>\n",
       "      <th>residual sugar</th>\n",
       "      <th>chlorides</th>\n",
       "      <th>free sulfur dioxide</th>\n",
       "      <th>total sulfur dioxide</th>\n",
       "      <th>density</th>\n",
       "      <th>pH</th>\n",
       "      <th>sulphates</th>\n",
       "      <th>alcohol</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>225</th>\n",
       "      <td>7.5</td>\n",
       "      <td>0.65</td>\n",
       "      <td>0.18</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.088</td>\n",
       "      <td>27.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>0.99915</td>\n",
       "      <td>3.38</td>\n",
       "      <td>0.77</td>\n",
       "      <td>9.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3557</th>\n",
       "      <td>6.3</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.29</td>\n",
       "      <td>12.2</td>\n",
       "      <td>0.044</td>\n",
       "      <td>59.0</td>\n",
       "      <td>196.0</td>\n",
       "      <td>0.99782</td>\n",
       "      <td>3.14</td>\n",
       "      <td>0.40</td>\n",
       "      <td>8.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3825</th>\n",
       "      <td>8.8</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.25</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.024</td>\n",
       "      <td>52.0</td>\n",
       "      <td>99.0</td>\n",
       "      <td>0.99250</td>\n",
       "      <td>2.87</td>\n",
       "      <td>0.49</td>\n",
       "      <td>11.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1740</th>\n",
       "      <td>6.4</td>\n",
       "      <td>0.45</td>\n",
       "      <td>0.07</td>\n",
       "      <td>1.1</td>\n",
       "      <td>0.030</td>\n",
       "      <td>10.0</td>\n",
       "      <td>131.0</td>\n",
       "      <td>0.99050</td>\n",
       "      <td>2.97</td>\n",
       "      <td>0.28</td>\n",
       "      <td>10.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1221</th>\n",
       "      <td>7.2</td>\n",
       "      <td>0.53</td>\n",
       "      <td>0.13</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.058</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0.99573</td>\n",
       "      <td>3.21</td>\n",
       "      <td>0.68</td>\n",
       "      <td>9.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \\\n",
       "225             7.5              0.65         0.18             7.0      0.088   \n",
       "3557            6.3              0.27         0.29            12.2      0.044   \n",
       "3825            8.8              0.27         0.25             5.0      0.024   \n",
       "1740            6.4              0.45         0.07             1.1      0.030   \n",
       "1221            7.2              0.53         0.13             2.0      0.058   \n",
       "\n",
       "      free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \\\n",
       "225                  27.0                  94.0  0.99915  3.38       0.77   \n",
       "3557                 59.0                 196.0  0.99782  3.14       0.40   \n",
       "3825                 52.0                  99.0  0.99250  2.87       0.49   \n",
       "1740                 10.0                 131.0  0.99050  2.97       0.28   \n",
       "1221                 18.0                  22.0  0.99573  3.21       0.68   \n",
       "\n",
       "      alcohol  \n",
       "225       9.4  \n",
       "3557      8.8  \n",
       "3825     11.4  \n",
       "1740     10.8  \n",
       "1221      9.9  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "hEdbrruAsN1D"
   },
   "source": [
    "### Normalize the data (TODO)\n",
    "\n",
    "Next, you can normalize the data, x, using the formula:\n",
    "$$x_{norm} = \\frac{x - \\mu}{\\sigma}$$\n",
    "- The `norm` function is defined for you.\n",
    "- Please apply the `norm` function to normalize the dataframes that contains the feature columns of `train`, `val` and `test` sets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "WWiZPAHCLjUs"
   },
   "outputs": [],
   "source": [
    "def norm(x):\n",
    "    return (x - train_stats['mean']) / train_stats['std']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "JEaOi2I2Lk69",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "6bc0cdcb563d192f271067aa3373ff32",
     "grade": false,
     "grade_id": "cell-d8416d975c371095",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "# normalize the train set\n",
    "norm_train_X = norm(train)\n",
    "    \n",
    "# normalize the val set\n",
    "norm_val_X = norm(val)\n",
    "    \n",
    "# normalize the test set\n",
    "norm_test_X = norm(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "4f567db45bf40191601780379cc100b8",
     "grade": true,
     "grade_id": "cell-97fad979d157529b",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_norm(norm_train_X, norm_val_X, norm_test_X, train, val, test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "hzykDwQhsaPO"
   },
   "source": [
    "## Define the Model (TODO)\n",
    "\n",
    "Define the model using the functional API. The base model will be 2 `Dense` layers of 128 neurons each, and have the `'relu'` activation.\n",
    "- Check out the documentation for [tf.keras.layers.Dense](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "Rhcns3oTFkM6",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "74b031247e569526552bf13a034a1c07",
     "grade": false,
     "grade_id": "cell-73fceedad1fe351c",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "def base_model(inputs):\n",
    "    \n",
    "    # connect a Dense layer with 128 neurons and a relu activation\n",
    "    x =  tf.keras.layers.Dense(128, activation= tf.nn.relu)(inputs)\n",
    "\n",
    "    \n",
    "    # connect another Dense layer with 128 neurons and a relu activation\n",
    "    x = tf.keras.layers.Dense(128, activation= tf.nn.relu)(x)\n",
    "    return x\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "9255924b3def80f679616e4c851a43e1",
     "grade": true,
     "grade_id": "cell-54f742a133353d75",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_base_model(base_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "xem_fcVws6Kz"
   },
   "source": [
    "# Define output layers of the model (TODO)\n",
    "\n",
    "You will add output layers to the base model. \n",
    "- The model will need two outputs.\n",
    "\n",
    "One output layer will predict wine quality, which is a numeric value.\n",
    "- Define a `Dense` layer with 1 neuron.\n",
    "- Since this is a regression output, the activation can be left as its default value `None`.\n",
    "\n",
    "The other output layer will predict the wine type, which is either red `1` or not red `0` (white).\n",
    "- Define a `Dense` layer with 1 neuron.\n",
    "- Since there are two possible categories, you can use a sigmoid activation for binary classification.\n",
    "\n",
    "Define the `Model`\n",
    "- Define the `Model` object, and set the following parameters:\n",
    "  - `inputs`: pass in the inputs to the model as a list.\n",
    "  - `outputs`: pass in a list of the outputs that you just defined: wine quality, then wine type.\n",
    "  - **Note**: please list the wine quality before wine type in the outputs, as this will affect the calculated loss if you choose the other order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "n5UGF8PMVLPt",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "76d35b90d20cdcbb22986cd8211057de",
     "grade": false,
     "grade_id": "cell-19e285f482f021fb",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "def final_model(inputs):\n",
    "    \n",
    "    # get the base model\n",
    "    x = base_model(inputs)\n",
    "\n",
    "    # connect the output Dense layer for regression\n",
    "    wine_quality = Dense(units='1', name='wine_quality')(x)\n",
    "\n",
    "    # connect the output Dense layer for classification. this will use a sigmoid activation.\n",
    "    wine_type = Dense(units='1', activation='sigmoid', name='wine_type')(x)\n",
    "\n",
    "    # define the model using the input and output layers\n",
    "    model = Model(inputs=inputs, outputs=[wine_quality, wine_type])\n",
    "\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "89cbf89d8ab5e2e59ecf7f63f517520a",
     "grade": true,
     "grade_id": "cell-40d050f855c817d1",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_final_model(final_model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "5R0BMTsltZyu"
   },
   "source": [
    "## Compiling the Model\n",
    "\n",
    "Next, compile the model. When setting the loss parameter of `model.compile`, you're setting the loss for each of the two outputs (wine quality and wine type).\n",
    "\n",
    "To set more than one loss, use a dictionary of key-value pairs.\n",
    "- You can look at the docs for the losses [here](https://www.tensorflow.org/api_docs/python/tf/keras/losses#functions).\n",
    "    - **Note**: For the desired spelling, please look at the \"Functions\" section of the documentation and not the \"classes\" section on that same page.\n",
    "- wine_type: Since you will be performing binary classification on wine type, you should use the binary crossentropy loss function for it.  Please pass this in as a string.  \n",
    "  - **Hint**, this should be all lowercase.  In the documentation, you'll see this under the \"Functions\" section, not the \"Classes\" section.\n",
    "- wine_quality: since this is a regression output, use the mean squared error.  Please pass it in as a string, all lowercase.\n",
    "  - **Hint**: You may notice that there are two aliases for mean squared error.  Please use the shorter name.\n",
    "\n",
    "\n",
    "You will also set the metric for each of the two outputs.  Again, to set metrics for two or more outputs, use a dictionary with key value pairs.\n",
    "- The metrics documentation is linked [here](https://www.tensorflow.org/api_docs/python/tf/keras/metrics).\n",
    "- For the wine type, please set it to accuracy as a string, all lowercase.\n",
    "- For wine quality, please use the root mean squared error.  Instead of a string, you'll set it to an instance of the class [RootMeanSquaredError](https://www.tensorflow.org/api_docs/python/tf/keras/metrics/RootMeanSquaredError), which belongs to the tf.keras.metrics module.\n",
    "\n",
    "**Note**: If you see the error message \n",
    ">Exception: wine quality loss function is incorrect.\n",
    "\n",
    "- Please also check your other losses and metrics, as the error may be caused by the other three key-value pairs and not the wine quality loss."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "LK11duUbUjmh",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "22f45067ca69eb2ccadb43874dbcc27b",
     "grade": false,
     "grade_id": "cell-81afdc4dcca51d5e",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "inputs = tf.keras.layers.Input(shape=(11,))\n",
    "rms = tf.keras.optimizers.RMSprop(lr=0.0001)\n",
    "model = final_model(inputs)\n",
    "\n",
    "model.compile(optimizer=rms, \n",
    "              loss = {'wine_type' : 'binary_crossentropy',\n",
    "                      'wine_quality' :  'mean_squared_error'\n",
    "                     },\n",
    "              metrics = {'wine_type' : 'accuracy',\n",
    "                         'wine_quality': tf.keras.metrics.RootMeanSquaredError()\n",
    "                       }\n",
    "             )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "88e02238ea5e456ff65e835cc8158054",
     "grade": true,
     "grade_id": "cell-2eeeba02391c4632",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_model_compile(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "90MpAMpWuKm-"
   },
   "source": [
    "## Training the Model\n",
    "\n",
    "Fit the model to the training inputs and outputs. \n",
    "- Check the documentation for [model.fit](https://www.tensorflow.org/api_docs/python/tf/keras/Model#fit).\n",
    "- Remember to use the normalized training set as inputs. \n",
    "- For the validation data, please use the normalized validation set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "deletable": false,
    "id": "_eiZkle4XwiY",
    "nbgrader": {
     "cell_type": "code",
     "checksum": "2ca7664be03bfd6fd3651ae44d17b793",
     "grade": false,
     "grade_id": "cell-0bb56262896f6680",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 3155 samples, validate on 789 samples\n",
      "Epoch 1/180\n",
      "3155/3155 [==============================] - 1s 377us/sample - loss: 27.8004 - wine_quality_loss: 27.0103 - wine_type_loss: 0.7501 - wine_quality_root_mean_squared_error: 5.2010 - wine_type_accuracy: 0.2868 - val_loss: 20.0428 - val_wine_quality_loss: 19.3139 - val_wine_type_loss: 0.7418 - val_wine_quality_root_mean_squared_error: 4.3933 - val_wine_type_accuracy: 0.3080\n",
      "Epoch 2/180\n",
      "3155/3155 [==============================] - 0s 123us/sample - loss: 13.9713 - wine_quality_loss: 13.2069 - wine_type_loss: 0.7448 - wine_quality_root_mean_squared_error: 3.6368 - wine_type_accuracy: 0.3059 - val_loss: 8.6435 - val_wine_quality_loss: 7.9546 - val_wine_type_loss: 0.7299 - val_wine_quality_root_mean_squared_error: 2.8131 - val_wine_type_accuracy: 0.3409\n",
      "Epoch 3/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 5.7869 - wine_quality_loss: 5.0783 - wine_type_loss: 0.6934 - wine_quality_root_mean_squared_error: 2.2568 - wine_type_accuracy: 0.5319 - val_loss: 3.5897 - val_wine_quality_loss: 3.0023 - val_wine_type_loss: 0.6349 - val_wine_quality_root_mean_squared_error: 1.7189 - val_wine_type_accuracy: 0.7719\n",
      "Epoch 4/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 3.0990 - wine_quality_loss: 2.5357 - wine_type_loss: 0.5563 - wine_quality_root_mean_squared_error: 1.5945 - wine_type_accuracy: 0.8323 - val_loss: 2.5874 - val_wine_quality_loss: 2.1348 - val_wine_type_loss: 0.4828 - val_wine_quality_root_mean_squared_error: 1.4507 - val_wine_type_accuracy: 0.8492\n",
      "Epoch 5/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 2.4593 - wine_quality_loss: 2.0637 - wine_type_loss: 0.4166 - wine_quality_root_mean_squared_error: 1.4290 - wine_type_accuracy: 0.8742 - val_loss: 2.1746 - val_wine_quality_loss: 1.8295 - val_wine_type_loss: 0.3628 - val_wine_quality_root_mean_squared_error: 1.3460 - val_wine_type_accuracy: 0.9113\n",
      "Epoch 6/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 2.0756 - wine_quality_loss: 1.7610 - wine_type_loss: 0.3124 - wine_quality_root_mean_squared_error: 1.3277 - wine_type_accuracy: 0.9398 - val_loss: 1.8882 - val_wine_quality_loss: 1.6263 - val_wine_type_loss: 0.2751 - val_wine_quality_root_mean_squared_error: 1.2700 - val_wine_type_accuracy: 0.9582\n",
      "Epoch 7/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 1.8204 - wine_quality_loss: 1.5840 - wine_type_loss: 0.2327 - wine_quality_root_mean_squared_error: 1.2599 - wine_type_accuracy: 0.9718 - val_loss: 1.6894 - val_wine_quality_loss: 1.4922 - val_wine_type_loss: 0.2054 - val_wine_quality_root_mean_squared_error: 1.2181 - val_wine_type_accuracy: 0.9810\n",
      "Epoch 8/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 1.6352 - wine_quality_loss: 1.4581 - wine_type_loss: 0.1762 - wine_quality_root_mean_squared_error: 1.2079 - wine_type_accuracy: 0.9838 - val_loss: 1.5342 - val_wine_quality_loss: 1.3817 - val_wine_type_loss: 0.1578 - val_wine_quality_root_mean_squared_error: 1.1731 - val_wine_type_accuracy: 0.9848\n",
      "Epoch 9/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 1.4900 - wine_quality_loss: 1.3544 - wine_type_loss: 0.1364 - wine_quality_root_mean_squared_error: 1.1634 - wine_type_accuracy: 0.9876 - val_loss: 1.4200 - val_wine_quality_loss: 1.2991 - val_wine_type_loss: 0.1241 - val_wine_quality_root_mean_squared_error: 1.1383 - val_wine_type_accuracy: 0.9886\n",
      "Epoch 10/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 1.3720 - wine_quality_loss: 1.2614 - wine_type_loss: 0.1101 - wine_quality_root_mean_squared_error: 1.1232 - wine_type_accuracy: 0.9886 - val_loss: 1.3297 - val_wine_quality_loss: 1.2301 - val_wine_type_loss: 0.1020 - val_wine_quality_root_mean_squared_error: 1.1079 - val_wine_type_accuracy: 0.9886\n",
      "Epoch 11/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 1.2728 - wine_quality_loss: 1.1805 - wine_type_loss: 0.0919 - wine_quality_root_mean_squared_error: 1.0867 - wine_type_accuracy: 0.9895 - val_loss: 1.2162 - val_wine_quality_loss: 1.1323 - val_wine_type_loss: 0.0858 - val_wine_quality_root_mean_squared_error: 1.0631 - val_wine_type_accuracy: 0.9886\n",
      "Epoch 12/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 1.1883 - wine_quality_loss: 1.1081 - wine_type_loss: 0.0785 - wine_quality_root_mean_squared_error: 1.0534 - wine_type_accuracy: 0.9902 - val_loss: 1.1472 - val_wine_quality_loss: 1.0739 - val_wine_type_loss: 0.0743 - val_wine_quality_root_mean_squared_error: 1.0357 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 13/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 1.1140 - wine_quality_loss: 1.0435 - wine_type_loss: 0.0690 - wine_quality_root_mean_squared_error: 1.0222 - wine_type_accuracy: 0.9908 - val_loss: 1.0841 - val_wine_quality_loss: 1.0187 - val_wine_type_loss: 0.0659 - val_wine_quality_root_mean_squared_error: 1.0089 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 14/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 1.0464 - wine_quality_loss: 0.9839 - wine_type_loss: 0.0622 - wine_quality_root_mean_squared_error: 0.9922 - wine_type_accuracy: 0.9908 - val_loss: 1.0118 - val_wine_quality_loss: 0.9527 - val_wine_type_loss: 0.0592 - val_wine_quality_root_mean_squared_error: 0.9759 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 15/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.9866 - wine_quality_loss: 0.9304 - wine_type_loss: 0.0563 - wine_quality_root_mean_squared_error: 0.9644 - wine_type_accuracy: 0.9918 - val_loss: 0.9556 - val_wine_quality_loss: 0.9005 - val_wine_type_loss: 0.0544 - val_wine_quality_root_mean_squared_error: 0.9492 - val_wine_type_accuracy: 0.9924\n",
      "Epoch 16/180\n",
      "3155/3155 [==============================] - 0s 80us/sample - loss: 0.9291 - wine_quality_loss: 0.8781 - wine_type_loss: 0.0520 - wine_quality_root_mean_squared_error: 0.9364 - wine_type_accuracy: 0.9918 - val_loss: 0.9048 - val_wine_quality_loss: 0.8532 - val_wine_type_loss: 0.0504 - val_wine_quality_root_mean_squared_error: 0.9241 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 17/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.8799 - wine_quality_loss: 0.8323 - wine_type_loss: 0.0489 - wine_quality_root_mean_squared_error: 0.9116 - wine_type_accuracy: 0.9921 - val_loss: 0.8541 - val_wine_quality_loss: 0.8056 - val_wine_type_loss: 0.0474 - val_wine_quality_root_mean_squared_error: 0.8980 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 18/180\n",
      "3155/3155 [==============================] - 0s 114us/sample - loss: 0.8345 - wine_quality_loss: 0.7867 - wine_type_loss: 0.0462 - wine_quality_root_mean_squared_error: 0.8879 - wine_type_accuracy: 0.9921 - val_loss: 0.8077 - val_wine_quality_loss: 0.7615 - val_wine_type_loss: 0.0449 - val_wine_quality_root_mean_squared_error: 0.8732 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 19/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.7918 - wine_quality_loss: 0.7517 - wine_type_loss: 0.0439 - wine_quality_root_mean_squared_error: 0.8647 - wine_type_accuracy: 0.9918 - val_loss: 0.7672 - val_wine_quality_loss: 0.7230 - val_wine_type_loss: 0.0430 - val_wine_quality_root_mean_squared_error: 0.8508 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 20/180\n",
      "3155/3155 [==============================] - 0s 78us/sample - loss: 0.7540 - wine_quality_loss: 0.7114 - wine_type_loss: 0.0422 - wine_quality_root_mean_squared_error: 0.8436 - wine_type_accuracy: 0.9918 - val_loss: 0.7330 - val_wine_quality_loss: 0.6904 - val_wine_type_loss: 0.0413 - val_wine_quality_root_mean_squared_error: 0.8314 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 21/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.7174 - wine_quality_loss: 0.6760 - wine_type_loss: 0.0407 - wine_quality_root_mean_squared_error: 0.8226 - wine_type_accuracy: 0.9918 - val_loss: 0.7020 - val_wine_quality_loss: 0.6607 - val_wine_type_loss: 0.0400 - val_wine_quality_root_mean_squared_error: 0.8134 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 22/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.6844 - wine_quality_loss: 0.6450 - wine_type_loss: 0.0392 - wine_quality_root_mean_squared_error: 0.8032 - wine_type_accuracy: 0.9921 - val_loss: 0.6648 - val_wine_quality_loss: 0.6245 - val_wine_type_loss: 0.0391 - val_wine_quality_root_mean_squared_error: 0.7908 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 23/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.6540 - wine_quality_loss: 0.6152 - wine_type_loss: 0.0382 - wine_quality_root_mean_squared_error: 0.7846 - wine_type_accuracy: 0.9918 - val_loss: 0.6445 - val_wine_quality_loss: 0.6046 - val_wine_type_loss: 0.0380 - val_wine_quality_root_mean_squared_error: 0.7785 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 24/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.6263 - wine_quality_loss: 0.5892 - wine_type_loss: 0.0373 - wine_quality_root_mean_squared_error: 0.7674 - wine_type_accuracy: 0.9921 - val_loss: 0.6167 - val_wine_quality_loss: 0.5778 - val_wine_type_loss: 0.0371 - val_wine_quality_root_mean_squared_error: 0.7611 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 25/180\n",
      "3155/3155 [==============================] - 0s 90us/sample - loss: 0.6005 - wine_quality_loss: 0.5643 - wine_type_loss: 0.0365 - wine_quality_root_mean_squared_error: 0.7509 - wine_type_accuracy: 0.9921 - val_loss: 0.5844 - val_wine_quality_loss: 0.5463 - val_wine_type_loss: 0.0365 - val_wine_quality_root_mean_squared_error: 0.7400 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 26/180\n",
      "3155/3155 [==============================] - 0s 91us/sample - loss: 0.5764 - wine_quality_loss: 0.5405 - wine_type_loss: 0.0358 - wine_quality_root_mean_squared_error: 0.7352 - wine_type_accuracy: 0.9921 - val_loss: 0.5690 - val_wine_quality_loss: 0.5317 - val_wine_type_loss: 0.0359 - val_wine_quality_root_mean_squared_error: 0.7299 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 27/180\n",
      "3155/3155 [==============================] - 0s 78us/sample - loss: 0.5565 - wine_quality_loss: 0.5215 - wine_type_loss: 0.0352 - wine_quality_root_mean_squared_error: 0.7220 - wine_type_accuracy: 0.9921 - val_loss: 0.5387 - val_wine_quality_loss: 0.5019 - val_wine_type_loss: 0.0353 - val_wine_quality_root_mean_squared_error: 0.7092 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 28/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.5346 - wine_quality_loss: 0.4998 - wine_type_loss: 0.0360 - wine_quality_root_mean_squared_error: 0.7071 - wine_type_accuracy: 0.9927 - val_loss: 0.5243 - val_wine_quality_loss: 0.4882 - val_wine_type_loss: 0.0348 - val_wine_quality_root_mean_squared_error: 0.6994 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 29/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.5157 - wine_quality_loss: 0.4808 - wine_type_loss: 0.0353 - wine_quality_root_mean_squared_error: 0.6939 - wine_type_accuracy: 0.9924 - val_loss: 0.5045 - val_wine_quality_loss: 0.4688 - val_wine_type_loss: 0.0343 - val_wine_quality_root_mean_squared_error: 0.6855 - val_wine_type_accuracy: 0.9962\n",
      "Epoch 30/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.4969 - wine_quality_loss: 0.4634 - wine_type_loss: 0.0335 - wine_quality_root_mean_squared_error: 0.6806 - wine_type_accuracy: 0.9927 - val_loss: 0.4898 - val_wine_quality_loss: 0.4546 - val_wine_type_loss: 0.0340 - val_wine_quality_root_mean_squared_error: 0.6749 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 31/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.4830 - wine_quality_loss: 0.4503 - wine_type_loss: 0.0331 - wine_quality_root_mean_squared_error: 0.6707 - wine_type_accuracy: 0.9927 - val_loss: 0.4780 - val_wine_quality_loss: 0.4428 - val_wine_type_loss: 0.0336 - val_wine_quality_root_mean_squared_error: 0.6664 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 32/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.4678 - wine_quality_loss: 0.4348 - wine_type_loss: 0.0333 - wine_quality_root_mean_squared_error: 0.6596 - wine_type_accuracy: 0.9930 - val_loss: 0.4570 - val_wine_quality_loss: 0.4223 - val_wine_type_loss: 0.0334 - val_wine_quality_root_mean_squared_error: 0.6506 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 33/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.4530 - wine_quality_loss: 0.4215 - wine_type_loss: 0.0323 - wine_quality_root_mean_squared_error: 0.6486 - wine_type_accuracy: 0.9927 - val_loss: 0.4456 - val_wine_quality_loss: 0.4115 - val_wine_type_loss: 0.0330 - val_wine_quality_root_mean_squared_error: 0.6421 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 34/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.4427 - wine_quality_loss: 0.4104 - wine_type_loss: 0.0319 - wine_quality_root_mean_squared_error: 0.6408 - wine_type_accuracy: 0.9933 - val_loss: 0.4343 - val_wine_quality_loss: 0.4002 - val_wine_type_loss: 0.0328 - val_wine_quality_root_mean_squared_error: 0.6334 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 35/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.4301 - wine_quality_loss: 0.3985 - wine_type_loss: 0.0316 - wine_quality_root_mean_squared_error: 0.6312 - wine_type_accuracy: 0.9933 - val_loss: 0.4252 - val_wine_quality_loss: 0.3913 - val_wine_type_loss: 0.0326 - val_wine_quality_root_mean_squared_error: 0.6263 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 36/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.4209 - wine_quality_loss: 0.3899 - wine_type_loss: 0.0312 - wine_quality_root_mean_squared_error: 0.6242 - wine_type_accuracy: 0.9933 - val_loss: 0.4256 - val_wine_quality_loss: 0.3922 - val_wine_type_loss: 0.0324 - val_wine_quality_root_mean_squared_error: 0.6267 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 37/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.4124 - wine_quality_loss: 0.3816 - wine_type_loss: 0.0309 - wine_quality_root_mean_squared_error: 0.6175 - wine_type_accuracy: 0.9933 - val_loss: 0.4248 - val_wine_quality_loss: 0.3911 - val_wine_type_loss: 0.0323 - val_wine_quality_root_mean_squared_error: 0.6262 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 38/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.4048 - wine_quality_loss: 0.3744 - wine_type_loss: 0.0307 - wine_quality_root_mean_squared_error: 0.6115 - wine_type_accuracy: 0.9937 - val_loss: 0.4095 - val_wine_quality_loss: 0.3763 - val_wine_type_loss: 0.0319 - val_wine_quality_root_mean_squared_error: 0.6142 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 39/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.3975 - wine_quality_loss: 0.3675 - wine_type_loss: 0.0319 - wine_quality_root_mean_squared_error: 0.6058 - wine_type_accuracy: 0.9937 - val_loss: 0.4011 - val_wine_quality_loss: 0.3680 - val_wine_type_loss: 0.0318 - val_wine_quality_root_mean_squared_error: 0.6073 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 40/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.3916 - wine_quality_loss: 0.3611 - wine_type_loss: 0.0302 - wine_quality_root_mean_squared_error: 0.6011 - wine_type_accuracy: 0.9943 - val_loss: 0.4013 - val_wine_quality_loss: 0.3680 - val_wine_type_loss: 0.0317 - val_wine_quality_root_mean_squared_error: 0.6077 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 41/180\n",
      "3155/3155 [==============================] - 0s 91us/sample - loss: 0.3849 - wine_quality_loss: 0.3547 - wine_type_loss: 0.0299 - wine_quality_root_mean_squared_error: 0.5958 - wine_type_accuracy: 0.9940 - val_loss: 0.3919 - val_wine_quality_loss: 0.3592 - val_wine_type_loss: 0.0316 - val_wine_quality_root_mean_squared_error: 0.5999 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 42/180\n",
      "3155/3155 [==============================] - 0s 91us/sample - loss: 0.3795 - wine_quality_loss: 0.3492 - wine_type_loss: 0.0297 - wine_quality_root_mean_squared_error: 0.5913 - wine_type_accuracy: 0.9946 - val_loss: 0.3834 - val_wine_quality_loss: 0.3507 - val_wine_type_loss: 0.0315 - val_wine_quality_root_mean_squared_error: 0.5929 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 43/180\n",
      "3155/3155 [==============================] - 0s 76us/sample - loss: 0.3759 - wine_quality_loss: 0.3465 - wine_type_loss: 0.0294 - wine_quality_root_mean_squared_error: 0.5885 - wine_type_accuracy: 0.9946 - val_loss: 0.3902 - val_wine_quality_loss: 0.3574 - val_wine_type_loss: 0.0313 - val_wine_quality_root_mean_squared_error: 0.5988 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 44/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.3717 - wine_quality_loss: 0.3424 - wine_type_loss: 0.0292 - wine_quality_root_mean_squared_error: 0.5851 - wine_type_accuracy: 0.9946 - val_loss: 0.3817 - val_wine_quality_loss: 0.3492 - val_wine_type_loss: 0.0313 - val_wine_quality_root_mean_squared_error: 0.5917 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 45/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3683 - wine_quality_loss: 0.3390 - wine_type_loss: 0.0291 - wine_quality_root_mean_squared_error: 0.5824 - wine_type_accuracy: 0.9943 - val_loss: 0.3790 - val_wine_quality_loss: 0.3467 - val_wine_type_loss: 0.0311 - val_wine_quality_root_mean_squared_error: 0.5895 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 46/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3627 - wine_quality_loss: 0.3333 - wine_type_loss: 0.0288 - wine_quality_root_mean_squared_error: 0.5777 - wine_type_accuracy: 0.9943 - val_loss: 0.3703 - val_wine_quality_loss: 0.3381 - val_wine_type_loss: 0.0310 - val_wine_quality_root_mean_squared_error: 0.5821 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 47/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3603 - wine_quality_loss: 0.3320 - wine_type_loss: 0.0292 - wine_quality_root_mean_squared_error: 0.5759 - wine_type_accuracy: 0.9949 - val_loss: 0.3702 - val_wine_quality_loss: 0.3381 - val_wine_type_loss: 0.0311 - val_wine_quality_root_mean_squared_error: 0.5820 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 48/180\n",
      "3155/3155 [==============================] - 0s 91us/sample - loss: 0.3584 - wine_quality_loss: 0.3299 - wine_type_loss: 0.0300 - wine_quality_root_mean_squared_error: 0.5744 - wine_type_accuracy: 0.9943 - val_loss: 0.3722 - val_wine_quality_loss: 0.3403 - val_wine_type_loss: 0.0309 - val_wine_quality_root_mean_squared_error: 0.5838 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 49/180\n",
      "3155/3155 [==============================] - 0s 97us/sample - loss: 0.3559 - wine_quality_loss: 0.3276 - wine_type_loss: 0.0283 - wine_quality_root_mean_squared_error: 0.5724 - wine_type_accuracy: 0.9943 - val_loss: 0.3685 - val_wine_quality_loss: 0.3364 - val_wine_type_loss: 0.0308 - val_wine_quality_root_mean_squared_error: 0.5808 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 50/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.3533 - wine_quality_loss: 0.3253 - wine_type_loss: 0.0283 - wine_quality_root_mean_squared_error: 0.5702 - wine_type_accuracy: 0.9943 - val_loss: 0.3703 - val_wine_quality_loss: 0.3384 - val_wine_type_loss: 0.0307 - val_wine_quality_root_mean_squared_error: 0.5825 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 51/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3504 - wine_quality_loss: 0.3219 - wine_type_loss: 0.0279 - wine_quality_root_mean_squared_error: 0.5678 - wine_type_accuracy: 0.9946 - val_loss: 0.3644 - val_wine_quality_loss: 0.3326 - val_wine_type_loss: 0.0306 - val_wine_quality_root_mean_squared_error: 0.5775 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 52/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3477 - wine_quality_loss: 0.3195 - wine_type_loss: 0.0277 - wine_quality_root_mean_squared_error: 0.5657 - wine_type_accuracy: 0.9946 - val_loss: 0.3611 - val_wine_quality_loss: 0.3297 - val_wine_type_loss: 0.0305 - val_wine_quality_root_mean_squared_error: 0.5746 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 53/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3462 - wine_quality_loss: 0.3190 - wine_type_loss: 0.0290 - wine_quality_root_mean_squared_error: 0.5645 - wine_type_accuracy: 0.9946 - val_loss: 0.3644 - val_wine_quality_loss: 0.3329 - val_wine_type_loss: 0.0304 - val_wine_quality_root_mean_squared_error: 0.5775 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 54/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3433 - wine_quality_loss: 0.3165 - wine_type_loss: 0.0273 - wine_quality_root_mean_squared_error: 0.5620 - wine_type_accuracy: 0.9946 - val_loss: 0.3814 - val_wine_quality_loss: 0.3499 - val_wine_type_loss: 0.0303 - val_wine_quality_root_mean_squared_error: 0.5922 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 55/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3426 - wine_quality_loss: 0.3148 - wine_type_loss: 0.0272 - wine_quality_root_mean_squared_error: 0.5615 - wine_type_accuracy: 0.9949 - val_loss: 0.3665 - val_wine_quality_loss: 0.3350 - val_wine_type_loss: 0.0303 - val_wine_quality_root_mean_squared_error: 0.5796 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 56/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3414 - wine_quality_loss: 0.3155 - wine_type_loss: 0.0270 - wine_quality_root_mean_squared_error: 0.5606 - wine_type_accuracy: 0.9946 - val_loss: 0.3679 - val_wine_quality_loss: 0.3364 - val_wine_type_loss: 0.0302 - val_wine_quality_root_mean_squared_error: 0.5808 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 57/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3392 - wine_quality_loss: 0.3127 - wine_type_loss: 0.0269 - wine_quality_root_mean_squared_error: 0.5588 - wine_type_accuracy: 0.9952 - val_loss: 0.3609 - val_wine_quality_loss: 0.3297 - val_wine_type_loss: 0.0301 - val_wine_quality_root_mean_squared_error: 0.5748 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 58/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3372 - wine_quality_loss: 0.3099 - wine_type_loss: 0.0268 - wine_quality_root_mean_squared_error: 0.5571 - wine_type_accuracy: 0.9952 - val_loss: 0.3699 - val_wine_quality_loss: 0.3384 - val_wine_type_loss: 0.0301 - val_wine_quality_root_mean_squared_error: 0.5826 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 59/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3355 - wine_quality_loss: 0.3090 - wine_type_loss: 0.0267 - wine_quality_root_mean_squared_error: 0.5557 - wine_type_accuracy: 0.9949 - val_loss: 0.3722 - val_wine_quality_loss: 0.3409 - val_wine_type_loss: 0.0301 - val_wine_quality_root_mean_squared_error: 0.5845 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 60/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3355 - wine_quality_loss: 0.3088 - wine_type_loss: 0.0265 - wine_quality_root_mean_squared_error: 0.5558 - wine_type_accuracy: 0.9946 - val_loss: 0.3605 - val_wine_quality_loss: 0.3295 - val_wine_type_loss: 0.0300 - val_wine_quality_root_mean_squared_error: 0.5746 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 61/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3336 - wine_quality_loss: 0.3073 - wine_type_loss: 0.0264 - wine_quality_root_mean_squared_error: 0.5542 - wine_type_accuracy: 0.9952 - val_loss: 0.3638 - val_wine_quality_loss: 0.3333 - val_wine_type_loss: 0.0299 - val_wine_quality_root_mean_squared_error: 0.5776 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 62/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3324 - wine_quality_loss: 0.3063 - wine_type_loss: 0.0261 - wine_quality_root_mean_squared_error: 0.5533 - wine_type_accuracy: 0.9956 - val_loss: 0.3571 - val_wine_quality_loss: 0.3265 - val_wine_type_loss: 0.0299 - val_wine_quality_root_mean_squared_error: 0.5716 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 63/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3304 - wine_quality_loss: 0.3036 - wine_type_loss: 0.0261 - wine_quality_root_mean_squared_error: 0.5516 - wine_type_accuracy: 0.9952 - val_loss: 0.3535 - val_wine_quality_loss: 0.3227 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5687 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 64/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3306 - wine_quality_loss: 0.3043 - wine_type_loss: 0.0260 - wine_quality_root_mean_squared_error: 0.5519 - wine_type_accuracy: 0.9952 - val_loss: 0.3516 - val_wine_quality_loss: 0.3210 - val_wine_type_loss: 0.0296 - val_wine_quality_root_mean_squared_error: 0.5671 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 65/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3279 - wine_quality_loss: 0.3021 - wine_type_loss: 0.0265 - wine_quality_root_mean_squared_error: 0.5495 - wine_type_accuracy: 0.9956 - val_loss: 0.3546 - val_wine_quality_loss: 0.3241 - val_wine_type_loss: 0.0297 - val_wine_quality_root_mean_squared_error: 0.5697 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 66/180\n",
      "3155/3155 [==============================] - 0s 91us/sample - loss: 0.3282 - wine_quality_loss: 0.3027 - wine_type_loss: 0.0256 - wine_quality_root_mean_squared_error: 0.5500 - wine_type_accuracy: 0.9952 - val_loss: 0.3521 - val_wine_quality_loss: 0.3220 - val_wine_type_loss: 0.0295 - val_wine_quality_root_mean_squared_error: 0.5677 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 67/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3271 - wine_quality_loss: 0.3007 - wine_type_loss: 0.0256 - wine_quality_root_mean_squared_error: 0.5490 - wine_type_accuracy: 0.9949 - val_loss: 0.3536 - val_wine_quality_loss: 0.3235 - val_wine_type_loss: 0.0294 - val_wine_quality_root_mean_squared_error: 0.5690 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 68/180\n",
      "3155/3155 [==============================] - 0s 78us/sample - loss: 0.3254 - wine_quality_loss: 0.2998 - wine_type_loss: 0.0270 - wine_quality_root_mean_squared_error: 0.5476 - wine_type_accuracy: 0.9952 - val_loss: 0.3614 - val_wine_quality_loss: 0.3310 - val_wine_type_loss: 0.0294 - val_wine_quality_root_mean_squared_error: 0.5759 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 69/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3245 - wine_quality_loss: 0.2988 - wine_type_loss: 0.0254 - wine_quality_root_mean_squared_error: 0.5468 - wine_type_accuracy: 0.9956 - val_loss: 0.3573 - val_wine_quality_loss: 0.3269 - val_wine_type_loss: 0.0293 - val_wine_quality_root_mean_squared_error: 0.5723 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 70/180\n",
      "3155/3155 [==============================] - 0s 98us/sample - loss: 0.3234 - wine_quality_loss: 0.2983 - wine_type_loss: 0.0252 - wine_quality_root_mean_squared_error: 0.5460 - wine_type_accuracy: 0.9956 - val_loss: 0.3520 - val_wine_quality_loss: 0.3217 - val_wine_type_loss: 0.0294 - val_wine_quality_root_mean_squared_error: 0.5677 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 71/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.3217 - wine_quality_loss: 0.2972 - wine_type_loss: 0.0251 - wine_quality_root_mean_squared_error: 0.5446 - wine_type_accuracy: 0.9952 - val_loss: 0.3540 - val_wine_quality_loss: 0.3236 - val_wine_type_loss: 0.0293 - val_wine_quality_root_mean_squared_error: 0.5695 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 72/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.3212 - wine_quality_loss: 0.2957 - wine_type_loss: 0.0250 - wine_quality_root_mean_squared_error: 0.5442 - wine_type_accuracy: 0.9952 - val_loss: 0.3644 - val_wine_quality_loss: 0.3341 - val_wine_type_loss: 0.0293 - val_wine_quality_root_mean_squared_error: 0.5785 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 73/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.3195 - wine_quality_loss: 0.2945 - wine_type_loss: 0.0248 - wine_quality_root_mean_squared_error: 0.5428 - wine_type_accuracy: 0.9956 - val_loss: 0.3537 - val_wine_quality_loss: 0.3237 - val_wine_type_loss: 0.0292 - val_wine_quality_root_mean_squared_error: 0.5693 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 74/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3200 - wine_quality_loss: 0.2948 - wine_type_loss: 0.0248 - wine_quality_root_mean_squared_error: 0.5433 - wine_type_accuracy: 0.9956 - val_loss: 0.3465 - val_wine_quality_loss: 0.3167 - val_wine_type_loss: 0.0291 - val_wine_quality_root_mean_squared_error: 0.5630 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 75/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.3192 - wine_quality_loss: 0.2946 - wine_type_loss: 0.0248 - wine_quality_root_mean_squared_error: 0.5426 - wine_type_accuracy: 0.9956 - val_loss: 0.3522 - val_wine_quality_loss: 0.3223 - val_wine_type_loss: 0.0292 - val_wine_quality_root_mean_squared_error: 0.5680 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 76/180\n",
      "3155/3155 [==============================] - 0s 76us/sample - loss: 0.3188 - wine_quality_loss: 0.2941 - wine_type_loss: 0.0245 - wine_quality_root_mean_squared_error: 0.5424 - wine_type_accuracy: 0.9952 - val_loss: 0.3514 - val_wine_quality_loss: 0.3221 - val_wine_type_loss: 0.0290 - val_wine_quality_root_mean_squared_error: 0.5675 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 77/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.3169 - wine_quality_loss: 0.2917 - wine_type_loss: 0.0244 - wine_quality_root_mean_squared_error: 0.5408 - wine_type_accuracy: 0.9956 - val_loss: 0.3513 - val_wine_quality_loss: 0.3213 - val_wine_type_loss: 0.0290 - val_wine_quality_root_mean_squared_error: 0.5674 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 78/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.3172 - wine_quality_loss: 0.2932 - wine_type_loss: 0.0244 - wine_quality_root_mean_squared_error: 0.5412 - wine_type_accuracy: 0.9952 - val_loss: 0.3499 - val_wine_quality_loss: 0.3202 - val_wine_type_loss: 0.0289 - val_wine_quality_root_mean_squared_error: 0.5662 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 79/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3154 - wine_quality_loss: 0.2907 - wine_type_loss: 0.0268 - wine_quality_root_mean_squared_error: 0.5395 - wine_type_accuracy: 0.9956 - val_loss: 0.3487 - val_wine_quality_loss: 0.3190 - val_wine_type_loss: 0.0289 - val_wine_quality_root_mean_squared_error: 0.5652 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 80/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.3155 - wine_quality_loss: 0.2919 - wine_type_loss: 0.0241 - wine_quality_root_mean_squared_error: 0.5397 - wine_type_accuracy: 0.9956 - val_loss: 0.3476 - val_wine_quality_loss: 0.3181 - val_wine_type_loss: 0.0288 - val_wine_quality_root_mean_squared_error: 0.5643 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 81/180\n",
      "3155/3155 [==============================] - 0s 91us/sample - loss: 0.3156 - wine_quality_loss: 0.2917 - wine_type_loss: 0.0240 - wine_quality_root_mean_squared_error: 0.5400 - wine_type_accuracy: 0.9956 - val_loss: 0.3489 - val_wine_quality_loss: 0.3194 - val_wine_type_loss: 0.0288 - val_wine_quality_root_mean_squared_error: 0.5655 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 82/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3138 - wine_quality_loss: 0.2896 - wine_type_loss: 0.0239 - wine_quality_root_mean_squared_error: 0.5384 - wine_type_accuracy: 0.9956 - val_loss: 0.3490 - val_wine_quality_loss: 0.3194 - val_wine_type_loss: 0.0288 - val_wine_quality_root_mean_squared_error: 0.5656 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 83/180\n",
      "3155/3155 [==============================] - 0s 77us/sample - loss: 0.3125 - wine_quality_loss: 0.2890 - wine_type_loss: 0.0238 - wine_quality_root_mean_squared_error: 0.5373 - wine_type_accuracy: 0.9956 - val_loss: 0.3519 - val_wine_quality_loss: 0.3224 - val_wine_type_loss: 0.0287 - val_wine_quality_root_mean_squared_error: 0.5682 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 84/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3112 - wine_quality_loss: 0.2872 - wine_type_loss: 0.0237 - wine_quality_root_mean_squared_error: 0.5362 - wine_type_accuracy: 0.9956 - val_loss: 0.3495 - val_wine_quality_loss: 0.3203 - val_wine_type_loss: 0.0287 - val_wine_quality_root_mean_squared_error: 0.5660 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 85/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3123 - wine_quality_loss: 0.2883 - wine_type_loss: 0.0236 - wine_quality_root_mean_squared_error: 0.5372 - wine_type_accuracy: 0.9956 - val_loss: 0.3482 - val_wine_quality_loss: 0.3186 - val_wine_type_loss: 0.0288 - val_wine_quality_root_mean_squared_error: 0.5649 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 86/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3108 - wine_quality_loss: 0.2875 - wine_type_loss: 0.0235 - wine_quality_root_mean_squared_error: 0.5359 - wine_type_accuracy: 0.9956 - val_loss: 0.3457 - val_wine_quality_loss: 0.3166 - val_wine_type_loss: 0.0286 - val_wine_quality_root_mean_squared_error: 0.5628 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 87/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.3104 - wine_quality_loss: 0.2866 - wine_type_loss: 0.0234 - wine_quality_root_mean_squared_error: 0.5356 - wine_type_accuracy: 0.9956 - val_loss: 0.3558 - val_wine_quality_loss: 0.3263 - val_wine_type_loss: 0.0287 - val_wine_quality_root_mean_squared_error: 0.5717 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 88/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3102 - wine_quality_loss: 0.2866 - wine_type_loss: 0.0233 - wine_quality_root_mean_squared_error: 0.5356 - wine_type_accuracy: 0.9956 - val_loss: 0.3499 - val_wine_quality_loss: 0.3204 - val_wine_type_loss: 0.0287 - val_wine_quality_root_mean_squared_error: 0.5664 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 89/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3092 - wine_quality_loss: 0.2862 - wine_type_loss: 0.0246 - wine_quality_root_mean_squared_error: 0.5347 - wine_type_accuracy: 0.9956 - val_loss: 0.3490 - val_wine_quality_loss: 0.3197 - val_wine_type_loss: 0.0286 - val_wine_quality_root_mean_squared_error: 0.5657 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 90/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.3075 - wine_quality_loss: 0.2845 - wine_type_loss: 0.0231 - wine_quality_root_mean_squared_error: 0.5332 - wine_type_accuracy: 0.9956 - val_loss: 0.3589 - val_wine_quality_loss: 0.3293 - val_wine_type_loss: 0.0286 - val_wine_quality_root_mean_squared_error: 0.5744 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 91/180\n",
      "3155/3155 [==============================] - 0s 90us/sample - loss: 0.3074 - wine_quality_loss: 0.2839 - wine_type_loss: 0.0230 - wine_quality_root_mean_squared_error: 0.5332 - wine_type_accuracy: 0.9956 - val_loss: 0.3473 - val_wine_quality_loss: 0.3182 - val_wine_type_loss: 0.0285 - val_wine_quality_root_mean_squared_error: 0.5643 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 92/180\n",
      "3155/3155 [==============================] - 0s 78us/sample - loss: 0.3075 - wine_quality_loss: 0.2844 - wine_type_loss: 0.0229 - wine_quality_root_mean_squared_error: 0.5334 - wine_type_accuracy: 0.9956 - val_loss: 0.3451 - val_wine_quality_loss: 0.3160 - val_wine_type_loss: 0.0285 - val_wine_quality_root_mean_squared_error: 0.5624 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 93/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3062 - wine_quality_loss: 0.2829 - wine_type_loss: 0.0228 - wine_quality_root_mean_squared_error: 0.5323 - wine_type_accuracy: 0.9956 - val_loss: 0.3514 - val_wine_quality_loss: 0.3222 - val_wine_type_loss: 0.0284 - val_wine_quality_root_mean_squared_error: 0.5680 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 94/180\n",
      "3155/3155 [==============================] - 0s 91us/sample - loss: 0.3064 - wine_quality_loss: 0.2837 - wine_type_loss: 0.0227 - wine_quality_root_mean_squared_error: 0.5326 - wine_type_accuracy: 0.9956 - val_loss: 0.3561 - val_wine_quality_loss: 0.3270 - val_wine_type_loss: 0.0284 - val_wine_quality_root_mean_squared_error: 0.5722 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 95/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.3056 - wine_quality_loss: 0.2830 - wine_type_loss: 0.0226 - wine_quality_root_mean_squared_error: 0.5319 - wine_type_accuracy: 0.9956 - val_loss: 0.3477 - val_wine_quality_loss: 0.3187 - val_wine_type_loss: 0.0283 - val_wine_quality_root_mean_squared_error: 0.5648 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 96/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3055 - wine_quality_loss: 0.2827 - wine_type_loss: 0.0226 - wine_quality_root_mean_squared_error: 0.5319 - wine_type_accuracy: 0.9956 - val_loss: 0.3487 - val_wine_quality_loss: 0.3200 - val_wine_type_loss: 0.0282 - val_wine_quality_root_mean_squared_error: 0.5658 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 97/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.3042 - wine_quality_loss: 0.2817 - wine_type_loss: 0.0225 - wine_quality_root_mean_squared_error: 0.5307 - wine_type_accuracy: 0.9956 - val_loss: 0.3462 - val_wine_quality_loss: 0.3174 - val_wine_type_loss: 0.0282 - val_wine_quality_root_mean_squared_error: 0.5636 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 98/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3030 - wine_quality_loss: 0.2807 - wine_type_loss: 0.0223 - wine_quality_root_mean_squared_error: 0.5297 - wine_type_accuracy: 0.9956 - val_loss: 0.3457 - val_wine_quality_loss: 0.3170 - val_wine_type_loss: 0.0282 - val_wine_quality_root_mean_squared_error: 0.5632 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 99/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3041 - wine_quality_loss: 0.2818 - wine_type_loss: 0.0222 - wine_quality_root_mean_squared_error: 0.5309 - wine_type_accuracy: 0.9959 - val_loss: 0.3466 - val_wine_quality_loss: 0.3179 - val_wine_type_loss: 0.0282 - val_wine_quality_root_mean_squared_error: 0.5639 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 100/180\n",
      "3155/3155 [==============================] - 0s 76us/sample - loss: 0.3020 - wine_quality_loss: 0.2801 - wine_type_loss: 0.0221 - wine_quality_root_mean_squared_error: 0.5290 - wine_type_accuracy: 0.9956 - val_loss: 0.3451 - val_wine_quality_loss: 0.3165 - val_wine_type_loss: 0.0282 - val_wine_quality_root_mean_squared_error: 0.5626 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 101/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3024 - wine_quality_loss: 0.2803 - wine_type_loss: 0.0220 - wine_quality_root_mean_squared_error: 0.5294 - wine_type_accuracy: 0.9959 - val_loss: 0.3448 - val_wine_quality_loss: 0.3161 - val_wine_type_loss: 0.0281 - val_wine_quality_root_mean_squared_error: 0.5624 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 102/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.3013 - wine_quality_loss: 0.2795 - wine_type_loss: 0.0219 - wine_quality_root_mean_squared_error: 0.5284 - wine_type_accuracy: 0.9962 - val_loss: 0.3470 - val_wine_quality_loss: 0.3186 - val_wine_type_loss: 0.0281 - val_wine_quality_root_mean_squared_error: 0.5645 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 103/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.3019 - wine_quality_loss: 0.2794 - wine_type_loss: 0.0220 - wine_quality_root_mean_squared_error: 0.5291 - wine_type_accuracy: 0.9962 - val_loss: 0.3476 - val_wine_quality_loss: 0.3188 - val_wine_type_loss: 0.0280 - val_wine_quality_root_mean_squared_error: 0.5650 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 104/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.3015 - wine_quality_loss: 0.2797 - wine_type_loss: 0.0243 - wine_quality_root_mean_squared_error: 0.5288 - wine_type_accuracy: 0.9962 - val_loss: 0.3475 - val_wine_quality_loss: 0.3189 - val_wine_type_loss: 0.0279 - val_wine_quality_root_mean_squared_error: 0.5650 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 105/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2998 - wine_quality_loss: 0.2782 - wine_type_loss: 0.0217 - wine_quality_root_mean_squared_error: 0.5273 - wine_type_accuracy: 0.9962 - val_loss: 0.3558 - val_wine_quality_loss: 0.3269 - val_wine_type_loss: 0.0279 - val_wine_quality_root_mean_squared_error: 0.5724 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 106/180\n",
      "3155/3155 [==============================] - 0s 91us/sample - loss: 0.2997 - wine_quality_loss: 0.2780 - wine_type_loss: 0.0217 - wine_quality_root_mean_squared_error: 0.5273 - wine_type_accuracy: 0.9962 - val_loss: 0.3469 - val_wine_quality_loss: 0.3184 - val_wine_type_loss: 0.0279 - val_wine_quality_root_mean_squared_error: 0.5645 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 107/180\n",
      "3155/3155 [==============================] - 0s 90us/sample - loss: 0.2994 - wine_quality_loss: 0.2777 - wine_type_loss: 0.0215 - wine_quality_root_mean_squared_error: 0.5270 - wine_type_accuracy: 0.9962 - val_loss: 0.3471 - val_wine_quality_loss: 0.3188 - val_wine_type_loss: 0.0278 - val_wine_quality_root_mean_squared_error: 0.5647 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 108/180\n",
      "3155/3155 [==============================] - 0s 78us/sample - loss: 0.2985 - wine_quality_loss: 0.2767 - wine_type_loss: 0.0214 - wine_quality_root_mean_squared_error: 0.5263 - wine_type_accuracy: 0.9965 - val_loss: 0.3470 - val_wine_quality_loss: 0.3186 - val_wine_type_loss: 0.0278 - val_wine_quality_root_mean_squared_error: 0.5647 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 109/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2978 - wine_quality_loss: 0.2764 - wine_type_loss: 0.0213 - wine_quality_root_mean_squared_error: 0.5257 - wine_type_accuracy: 0.9965 - val_loss: 0.3493 - val_wine_quality_loss: 0.3205 - val_wine_type_loss: 0.0278 - val_wine_quality_root_mean_squared_error: 0.5667 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 110/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2971 - wine_quality_loss: 0.2754 - wine_type_loss: 0.0213 - wine_quality_root_mean_squared_error: 0.5251 - wine_type_accuracy: 0.9962 - val_loss: 0.3502 - val_wine_quality_loss: 0.3216 - val_wine_type_loss: 0.0277 - val_wine_quality_root_mean_squared_error: 0.5675 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 111/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2969 - wine_quality_loss: 0.2756 - wine_type_loss: 0.0211 - wine_quality_root_mean_squared_error: 0.5251 - wine_type_accuracy: 0.9962 - val_loss: 0.3447 - val_wine_quality_loss: 0.3166 - val_wine_type_loss: 0.0277 - val_wine_quality_root_mean_squared_error: 0.5627 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 112/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2962 - wine_quality_loss: 0.2749 - wine_type_loss: 0.0210 - wine_quality_root_mean_squared_error: 0.5245 - wine_type_accuracy: 0.9965 - val_loss: 0.3456 - val_wine_quality_loss: 0.3173 - val_wine_type_loss: 0.0277 - val_wine_quality_root_mean_squared_error: 0.5635 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 113/180\n",
      "3155/3155 [==============================] - 0s 91us/sample - loss: 0.2958 - wine_quality_loss: 0.2752 - wine_type_loss: 0.0210 - wine_quality_root_mean_squared_error: 0.5242 - wine_type_accuracy: 0.9962 - val_loss: 0.3490 - val_wine_quality_loss: 0.3206 - val_wine_type_loss: 0.0277 - val_wine_quality_root_mean_squared_error: 0.5666 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 114/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.2958 - wine_quality_loss: 0.2747 - wine_type_loss: 0.0209 - wine_quality_root_mean_squared_error: 0.5242 - wine_type_accuracy: 0.9962 - val_loss: 0.3496 - val_wine_quality_loss: 0.3214 - val_wine_type_loss: 0.0276 - val_wine_quality_root_mean_squared_error: 0.5671 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 115/180\n",
      "3155/3155 [==============================] - 0s 78us/sample - loss: 0.2947 - wine_quality_loss: 0.2737 - wine_type_loss: 0.0208 - wine_quality_root_mean_squared_error: 0.5232 - wine_type_accuracy: 0.9965 - val_loss: 0.3428 - val_wine_quality_loss: 0.3146 - val_wine_type_loss: 0.0276 - val_wine_quality_root_mean_squared_error: 0.5611 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 116/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.2944 - wine_quality_loss: 0.2731 - wine_type_loss: 0.0208 - wine_quality_root_mean_squared_error: 0.5230 - wine_type_accuracy: 0.9965 - val_loss: 0.3454 - val_wine_quality_loss: 0.3172 - val_wine_type_loss: 0.0276 - val_wine_quality_root_mean_squared_error: 0.5634 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 117/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2933 - wine_quality_loss: 0.2725 - wine_type_loss: 0.0206 - wine_quality_root_mean_squared_error: 0.5221 - wine_type_accuracy: 0.9962 - val_loss: 0.3482 - val_wine_quality_loss: 0.3198 - val_wine_type_loss: 0.0277 - val_wine_quality_root_mean_squared_error: 0.5658 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 118/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2937 - wine_quality_loss: 0.2729 - wine_type_loss: 0.0206 - wine_quality_root_mean_squared_error: 0.5226 - wine_type_accuracy: 0.9965 - val_loss: 0.3461 - val_wine_quality_loss: 0.3182 - val_wine_type_loss: 0.0276 - val_wine_quality_root_mean_squared_error: 0.5640 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 119/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2929 - wine_quality_loss: 0.2726 - wine_type_loss: 0.0205 - wine_quality_root_mean_squared_error: 0.5218 - wine_type_accuracy: 0.9965 - val_loss: 0.3455 - val_wine_quality_loss: 0.3174 - val_wine_type_loss: 0.0276 - val_wine_quality_root_mean_squared_error: 0.5635 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 120/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.2923 - wine_quality_loss: 0.2714 - wine_type_loss: 0.0205 - wine_quality_root_mean_squared_error: 0.5213 - wine_type_accuracy: 0.9965 - val_loss: 0.3469 - val_wine_quality_loss: 0.3188 - val_wine_type_loss: 0.0276 - val_wine_quality_root_mean_squared_error: 0.5648 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 121/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2928 - wine_quality_loss: 0.2721 - wine_type_loss: 0.0203 - wine_quality_root_mean_squared_error: 0.5219 - wine_type_accuracy: 0.9965 - val_loss: 0.3443 - val_wine_quality_loss: 0.3164 - val_wine_type_loss: 0.0276 - val_wine_quality_root_mean_squared_error: 0.5625 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 122/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.2920 - wine_quality_loss: 0.2722 - wine_type_loss: 0.0203 - wine_quality_root_mean_squared_error: 0.5212 - wine_type_accuracy: 0.9962 - val_loss: 0.3525 - val_wine_quality_loss: 0.3247 - val_wine_type_loss: 0.0275 - val_wine_quality_root_mean_squared_error: 0.5698 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 123/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2912 - wine_quality_loss: 0.2709 - wine_type_loss: 0.0202 - wine_quality_root_mean_squared_error: 0.5205 - wine_type_accuracy: 0.9965 - val_loss: 0.3493 - val_wine_quality_loss: 0.3214 - val_wine_type_loss: 0.0274 - val_wine_quality_root_mean_squared_error: 0.5670 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 124/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.2908 - wine_quality_loss: 0.2705 - wine_type_loss: 0.0201 - wine_quality_root_mean_squared_error: 0.5203 - wine_type_accuracy: 0.9965 - val_loss: 0.3463 - val_wine_quality_loss: 0.3183 - val_wine_type_loss: 0.0275 - val_wine_quality_root_mean_squared_error: 0.5643 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 125/180\n",
      "3155/3155 [==============================] - 0s 90us/sample - loss: 0.2895 - wine_quality_loss: 0.2696 - wine_type_loss: 0.0200 - wine_quality_root_mean_squared_error: 0.5191 - wine_type_accuracy: 0.9968 - val_loss: 0.3554 - val_wine_quality_loss: 0.3273 - val_wine_type_loss: 0.0275 - val_wine_quality_root_mean_squared_error: 0.5723 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 126/180\n",
      "3155/3155 [==============================] - 0s 77us/sample - loss: 0.2896 - wine_quality_loss: 0.2701 - wine_type_loss: 0.0200 - wine_quality_root_mean_squared_error: 0.5192 - wine_type_accuracy: 0.9965 - val_loss: 0.3449 - val_wine_quality_loss: 0.3170 - val_wine_type_loss: 0.0274 - val_wine_quality_root_mean_squared_error: 0.5632 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 127/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2890 - wine_quality_loss: 0.2686 - wine_type_loss: 0.0198 - wine_quality_root_mean_squared_error: 0.5187 - wine_type_accuracy: 0.9968 - val_loss: 0.3490 - val_wine_quality_loss: 0.3212 - val_wine_type_loss: 0.0275 - val_wine_quality_root_mean_squared_error: 0.5668 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 128/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2892 - wine_quality_loss: 0.2690 - wine_type_loss: 0.0198 - wine_quality_root_mean_squared_error: 0.5189 - wine_type_accuracy: 0.9968 - val_loss: 0.3418 - val_wine_quality_loss: 0.3138 - val_wine_type_loss: 0.0274 - val_wine_quality_root_mean_squared_error: 0.5604 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 129/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2887 - wine_quality_loss: 0.2684 - wine_type_loss: 0.0197 - wine_quality_root_mean_squared_error: 0.5186 - wine_type_accuracy: 0.9965 - val_loss: 0.3462 - val_wine_quality_loss: 0.3184 - val_wine_type_loss: 0.0274 - val_wine_quality_root_mean_squared_error: 0.5643 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 130/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.2880 - wine_quality_loss: 0.2679 - wine_type_loss: 0.0197 - wine_quality_root_mean_squared_error: 0.5180 - wine_type_accuracy: 0.9965 - val_loss: 0.3460 - val_wine_quality_loss: 0.3182 - val_wine_type_loss: 0.0274 - val_wine_quality_root_mean_squared_error: 0.5642 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 131/180\n",
      "3155/3155 [==============================] - 0s 90us/sample - loss: 0.2874 - wine_quality_loss: 0.2682 - wine_type_loss: 0.0197 - wine_quality_root_mean_squared_error: 0.5174 - wine_type_accuracy: 0.9968 - val_loss: 0.3466 - val_wine_quality_loss: 0.3187 - val_wine_type_loss: 0.0274 - val_wine_quality_root_mean_squared_error: 0.5647 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 132/180\n",
      "3155/3155 [==============================] - 0s 77us/sample - loss: 0.2867 - wine_quality_loss: 0.2672 - wine_type_loss: 0.0195 - wine_quality_root_mean_squared_error: 0.5168 - wine_type_accuracy: 0.9968 - val_loss: 0.3501 - val_wine_quality_loss: 0.3222 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5678 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 133/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2872 - wine_quality_loss: 0.2679 - wine_type_loss: 0.0195 - wine_quality_root_mean_squared_error: 0.5174 - wine_type_accuracy: 0.9965 - val_loss: 0.3447 - val_wine_quality_loss: 0.3168 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5631 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 134/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2853 - wine_quality_loss: 0.2663 - wine_type_loss: 0.0194 - wine_quality_root_mean_squared_error: 0.5156 - wine_type_accuracy: 0.9965 - val_loss: 0.3458 - val_wine_quality_loss: 0.3181 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5641 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 135/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2859 - wine_quality_loss: 0.2662 - wine_type_loss: 0.0193 - wine_quality_root_mean_squared_error: 0.5162 - wine_type_accuracy: 0.9968 - val_loss: 0.3433 - val_wine_quality_loss: 0.3158 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5619 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 136/180\n",
      "3155/3155 [==============================] - 0s 91us/sample - loss: 0.2854 - wine_quality_loss: 0.2661 - wine_type_loss: 0.0192 - wine_quality_root_mean_squared_error: 0.5159 - wine_type_accuracy: 0.9968 - val_loss: 0.3461 - val_wine_quality_loss: 0.3183 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5643 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 137/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2852 - wine_quality_loss: 0.2659 - wine_type_loss: 0.0191 - wine_quality_root_mean_squared_error: 0.5157 - wine_type_accuracy: 0.9968 - val_loss: 0.3594 - val_wine_quality_loss: 0.3316 - val_wine_type_loss: 0.0274 - val_wine_quality_root_mean_squared_error: 0.5759 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 138/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.2856 - wine_quality_loss: 0.2668 - wine_type_loss: 0.0191 - wine_quality_root_mean_squared_error: 0.5162 - wine_type_accuracy: 0.9968 - val_loss: 0.3518 - val_wine_quality_loss: 0.3237 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5693 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 139/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.2839 - wine_quality_loss: 0.2641 - wine_type_loss: 0.0191 - wine_quality_root_mean_squared_error: 0.5145 - wine_type_accuracy: 0.9968 - val_loss: 0.3474 - val_wine_quality_loss: 0.3197 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5655 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 140/180\n",
      "3155/3155 [==============================] - 0s 99us/sample - loss: 0.2839 - wine_quality_loss: 0.2645 - wine_type_loss: 0.0190 - wine_quality_root_mean_squared_error: 0.5146 - wine_type_accuracy: 0.9968 - val_loss: 0.3455 - val_wine_quality_loss: 0.3177 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5638 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 141/180\n",
      "3155/3155 [==============================] - 0s 91us/sample - loss: 0.2830 - wine_quality_loss: 0.2647 - wine_type_loss: 0.0189 - wine_quality_root_mean_squared_error: 0.5139 - wine_type_accuracy: 0.9968 - val_loss: 0.3510 - val_wine_quality_loss: 0.3233 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5687 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 142/180\n",
      "3155/3155 [==============================] - 0s 79us/sample - loss: 0.2819 - wine_quality_loss: 0.2632 - wine_type_loss: 0.0189 - wine_quality_root_mean_squared_error: 0.5129 - wine_type_accuracy: 0.9968 - val_loss: 0.3521 - val_wine_quality_loss: 0.3249 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5698 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 143/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2822 - wine_quality_loss: 0.2635 - wine_type_loss: 0.0188 - wine_quality_root_mean_squared_error: 0.5133 - wine_type_accuracy: 0.9968 - val_loss: 0.3465 - val_wine_quality_loss: 0.3189 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5648 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 144/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2826 - wine_quality_loss: 0.2637 - wine_type_loss: 0.0186 - wine_quality_root_mean_squared_error: 0.5137 - wine_type_accuracy: 0.9968 - val_loss: 0.3484 - val_wine_quality_loss: 0.3206 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5664 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 145/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2818 - wine_quality_loss: 0.2636 - wine_type_loss: 0.0186 - wine_quality_root_mean_squared_error: 0.5130 - wine_type_accuracy: 0.9968 - val_loss: 0.3481 - val_wine_quality_loss: 0.3202 - val_wine_type_loss: 0.0274 - val_wine_quality_root_mean_squared_error: 0.5660 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 146/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2817 - wine_quality_loss: 0.2631 - wine_type_loss: 0.0186 - wine_quality_root_mean_squared_error: 0.5129 - wine_type_accuracy: 0.9968 - val_loss: 0.3504 - val_wine_quality_loss: 0.3223 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5681 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 147/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2804 - wine_quality_loss: 0.2624 - wine_type_loss: 0.0185 - wine_quality_root_mean_squared_error: 0.5117 - wine_type_accuracy: 0.9968 - val_loss: 0.3509 - val_wine_quality_loss: 0.3231 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5686 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 148/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2798 - wine_quality_loss: 0.2613 - wine_type_loss: 0.0184 - wine_quality_root_mean_squared_error: 0.5112 - wine_type_accuracy: 0.9968 - val_loss: 0.3472 - val_wine_quality_loss: 0.3195 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5654 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 149/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2811 - wine_quality_loss: 0.2624 - wine_type_loss: 0.0184 - wine_quality_root_mean_squared_error: 0.5125 - wine_type_accuracy: 0.9968 - val_loss: 0.3446 - val_wine_quality_loss: 0.3168 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5631 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 150/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2801 - wine_quality_loss: 0.2613 - wine_type_loss: 0.0183 - wine_quality_root_mean_squared_error: 0.5115 - wine_type_accuracy: 0.9968 - val_loss: 0.3421 - val_wine_quality_loss: 0.3145 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5608 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 151/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2790 - wine_quality_loss: 0.2609 - wine_type_loss: 0.0183 - wine_quality_root_mean_squared_error: 0.5105 - wine_type_accuracy: 0.9968 - val_loss: 0.3449 - val_wine_quality_loss: 0.3173 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5633 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 152/180\n",
      "3155/3155 [==============================] - 0s 90us/sample - loss: 0.2789 - wine_quality_loss: 0.2605 - wine_type_loss: 0.0186 - wine_quality_root_mean_squared_error: 0.5106 - wine_type_accuracy: 0.9968 - val_loss: 0.3510 - val_wine_quality_loss: 0.3231 - val_wine_type_loss: 0.0273 - val_wine_quality_root_mean_squared_error: 0.5687 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 153/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.2784 - wine_quality_loss: 0.2596 - wine_type_loss: 0.0182 - wine_quality_root_mean_squared_error: 0.5101 - wine_type_accuracy: 0.9968 - val_loss: 0.3551 - val_wine_quality_loss: 0.3273 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5723 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 154/180\n",
      "3155/3155 [==============================] - 0s 79us/sample - loss: 0.2778 - wine_quality_loss: 0.2595 - wine_type_loss: 0.0181 - wine_quality_root_mean_squared_error: 0.5095 - wine_type_accuracy: 0.9968 - val_loss: 0.3476 - val_wine_quality_loss: 0.3199 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5657 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 155/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2786 - wine_quality_loss: 0.2602 - wine_type_loss: 0.0180 - wine_quality_root_mean_squared_error: 0.5104 - wine_type_accuracy: 0.9968 - val_loss: 0.3504 - val_wine_quality_loss: 0.3230 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5683 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 156/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2778 - wine_quality_loss: 0.2599 - wine_type_loss: 0.0180 - wine_quality_root_mean_squared_error: 0.5096 - wine_type_accuracy: 0.9968 - val_loss: 0.3445 - val_wine_quality_loss: 0.3171 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5631 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 157/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2779 - wine_quality_loss: 0.2593 - wine_type_loss: 0.0179 - wine_quality_root_mean_squared_error: 0.5098 - wine_type_accuracy: 0.9968 - val_loss: 0.3491 - val_wine_quality_loss: 0.3215 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5671 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 158/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2762 - wine_quality_loss: 0.2587 - wine_type_loss: 0.0182 - wine_quality_root_mean_squared_error: 0.5082 - wine_type_accuracy: 0.9968 - val_loss: 0.3421 - val_wine_quality_loss: 0.3147 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5609 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 159/180\n",
      "3155/3155 [==============================] - 0s 96us/sample - loss: 0.2767 - wine_quality_loss: 0.2584 - wine_type_loss: 0.0191 - wine_quality_root_mean_squared_error: 0.5087 - wine_type_accuracy: 0.9968 - val_loss: 0.3450 - val_wine_quality_loss: 0.3177 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5636 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 160/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2749 - wine_quality_loss: 0.2570 - wine_type_loss: 0.0177 - wine_quality_root_mean_squared_error: 0.5071 - wine_type_accuracy: 0.9968 - val_loss: 0.3459 - val_wine_quality_loss: 0.3183 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5643 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 161/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2754 - wine_quality_loss: 0.2581 - wine_type_loss: 0.0177 - wine_quality_root_mean_squared_error: 0.5076 - wine_type_accuracy: 0.9968 - val_loss: 0.3521 - val_wine_quality_loss: 0.3246 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5698 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 162/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2753 - wine_quality_loss: 0.2578 - wine_type_loss: 0.0176 - wine_quality_root_mean_squared_error: 0.5076 - wine_type_accuracy: 0.9968 - val_loss: 0.3502 - val_wine_quality_loss: 0.3227 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5682 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 163/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.2750 - wine_quality_loss: 0.2572 - wine_type_loss: 0.0175 - wine_quality_root_mean_squared_error: 0.5073 - wine_type_accuracy: 0.9968 - val_loss: 0.3477 - val_wine_quality_loss: 0.3202 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5659 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 164/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2738 - wine_quality_loss: 0.2566 - wine_type_loss: 0.0174 - wine_quality_root_mean_squared_error: 0.5062 - wine_type_accuracy: 0.9968 - val_loss: 0.3422 - val_wine_quality_loss: 0.3149 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5610 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 165/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.2742 - wine_quality_loss: 0.2576 - wine_type_loss: 0.0174 - wine_quality_root_mean_squared_error: 0.5067 - wine_type_accuracy: 0.9968 - val_loss: 0.3471 - val_wine_quality_loss: 0.3198 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5654 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 166/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2734 - wine_quality_loss: 0.2562 - wine_type_loss: 0.0174 - wine_quality_root_mean_squared_error: 0.5059 - wine_type_accuracy: 0.9968 - val_loss: 0.3514 - val_wine_quality_loss: 0.3239 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5691 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 167/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2727 - wine_quality_loss: 0.2560 - wine_type_loss: 0.0173 - wine_quality_root_mean_squared_error: 0.5052 - wine_type_accuracy: 0.9968 - val_loss: 0.3539 - val_wine_quality_loss: 0.3262 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5714 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 168/180\n",
      "3155/3155 [==============================] - 0s 75us/sample - loss: 0.2718 - wine_quality_loss: 0.2543 - wine_type_loss: 0.0173 - wine_quality_root_mean_squared_error: 0.5045 - wine_type_accuracy: 0.9968 - val_loss: 0.3515 - val_wine_quality_loss: 0.3244 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5693 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 169/180\n",
      "3155/3155 [==============================] - 0s 79us/sample - loss: 0.2721 - wine_quality_loss: 0.2546 - wine_type_loss: 0.0172 - wine_quality_root_mean_squared_error: 0.5049 - wine_type_accuracy: 0.9968 - val_loss: 0.3470 - val_wine_quality_loss: 0.3196 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5653 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 170/180\n",
      "3155/3155 [==============================] - 0s 113us/sample - loss: 0.2715 - wine_quality_loss: 0.2552 - wine_type_loss: 0.0171 - wine_quality_root_mean_squared_error: 0.5043 - wine_type_accuracy: 0.9968 - val_loss: 0.3577 - val_wine_quality_loss: 0.3300 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5747 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 171/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2724 - wine_quality_loss: 0.2550 - wine_type_loss: 0.0170 - wine_quality_root_mean_squared_error: 0.5053 - wine_type_accuracy: 0.9968 - val_loss: 0.3504 - val_wine_quality_loss: 0.3230 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5684 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 172/180\n",
      "3155/3155 [==============================] - 0s 92us/sample - loss: 0.2718 - wine_quality_loss: 0.2550 - wine_type_loss: 0.0170 - wine_quality_root_mean_squared_error: 0.5048 - wine_type_accuracy: 0.9968 - val_loss: 0.3468 - val_wine_quality_loss: 0.3192 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5652 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 173/180\n",
      "3155/3155 [==============================] - 0s 79us/sample - loss: 0.2717 - wine_quality_loss: 0.2550 - wine_type_loss: 0.0169 - wine_quality_root_mean_squared_error: 0.5047 - wine_type_accuracy: 0.9968 - val_loss: 0.3421 - val_wine_quality_loss: 0.3146 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5610 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 174/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2704 - wine_quality_loss: 0.2532 - wine_type_loss: 0.0170 - wine_quality_root_mean_squared_error: 0.5034 - wine_type_accuracy: 0.9968 - val_loss: 0.3444 - val_wine_quality_loss: 0.3171 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5631 - val_wine_type_accuracy: 0.9937\n",
      "Epoch 175/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2699 - wine_quality_loss: 0.2527 - wine_type_loss: 0.0168 - wine_quality_root_mean_squared_error: 0.5030 - wine_type_accuracy: 0.9968 - val_loss: 0.3443 - val_wine_quality_loss: 0.3167 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5629 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 176/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2698 - wine_quality_loss: 0.2528 - wine_type_loss: 0.0167 - wine_quality_root_mean_squared_error: 0.5030 - wine_type_accuracy: 0.9968 - val_loss: 0.3587 - val_wine_quality_loss: 0.3307 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5755 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 177/180\n",
      "3155/3155 [==============================] - 0s 94us/sample - loss: 0.2697 - wine_quality_loss: 0.2532 - wine_type_loss: 0.0167 - wine_quality_root_mean_squared_error: 0.5029 - wine_type_accuracy: 0.9968 - val_loss: 0.3470 - val_wine_quality_loss: 0.3197 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5652 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 178/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2700 - wine_quality_loss: 0.2532 - wine_type_loss: 0.0167 - wine_quality_root_mean_squared_error: 0.5032 - wine_type_accuracy: 0.9968 - val_loss: 0.3435 - val_wine_quality_loss: 0.3161 - val_wine_type_loss: 0.0272 - val_wine_quality_root_mean_squared_error: 0.5621 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 179/180\n",
      "3155/3155 [==============================] - 0s 95us/sample - loss: 0.2691 - wine_quality_loss: 0.2520 - wine_type_loss: 0.0166 - wine_quality_root_mean_squared_error: 0.5024 - wine_type_accuracy: 0.9968 - val_loss: 0.3470 - val_wine_quality_loss: 0.3193 - val_wine_type_loss: 0.0271 - val_wine_quality_root_mean_squared_error: 0.5653 - val_wine_type_accuracy: 0.9949\n",
      "Epoch 180/180\n",
      "3155/3155 [==============================] - 0s 93us/sample - loss: 0.2691 - wine_quality_loss: 0.2521 - wine_type_loss: 0.0166 - wine_quality_root_mean_squared_error: 0.5025 - wine_type_accuracy: 0.9968 - val_loss: 0.3624 - val_wine_quality_loss: 0.3348 - val_wine_type_loss: 0.0270 - val_wine_quality_root_mean_squared_error: 0.5789 - val_wine_type_accuracy: 0.9949\n"
     ]
    }
   ],
   "source": [
    "# Please uncomment all lines in this cell and replace those marked with `# YOUR CODE HERE`.\n",
    "# You can select all lines in this code cell with Ctrl+A (Windows/Linux) or Cmd+A (Mac), then press Ctrl+/ (Windows/Linux) or Cmd+/ (Mac) to uncomment.\n",
    "\n",
    "\n",
    "\n",
    "history = model.fit(norm_train_X, train_Y,\n",
    "                    epochs = 180, validation_data=(norm_val_X, val_Y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "fadad8896eda9c8c2115970724b15508",
     "grade": true,
     "grade_id": "cell-eb4d5b41bef8f0ab",
     "locked": true,
     "points": 1,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[92m All public tests passed\n"
     ]
    }
   ],
   "source": [
    "utils.test_history(history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "CubF2J2gSf6q"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "789/789 [==============================] - 0s 65us/sample - loss: 0.3624 - wine_quality_loss: 0.3348 - wine_type_loss: 0.0270 - wine_quality_root_mean_squared_error: 0.5789 - wine_type_accuracy: 0.9949\n",
      "\n",
      "loss: 0.36244543941150903\n",
      "wine_quality_loss: 0.33477914333343506\n",
      "wine_type_loss: 0.02702885866165161\n",
      "wine_quality_rmse: 0.5788568258285522\n",
      "wine_type_accuracy: 0.9949302673339844\n"
     ]
    }
   ],
   "source": [
    "# Gather the training metrics\n",
    "loss, wine_quality_loss, wine_type_loss, wine_quality_rmse, wine_type_accuracy = model.evaluate(x=norm_val_X, y=val_Y)\n",
    "\n",
    "print()\n",
    "print(f'loss: {loss}')\n",
    "print(f'wine_quality_loss: {wine_quality_loss}')\n",
    "print(f'wine_type_loss: {wine_type_loss}')\n",
    "print(f'wine_quality_rmse: {wine_quality_rmse}')\n",
    "print(f'wine_type_accuracy: {wine_type_accuracy}')\n",
    "\n",
    "# EXPECTED VALUES\n",
    "# ~ 0.30 - 0.38\n",
    "# ~ 0.30 - 0.38\n",
    "# ~ 0.018 - 0.030\n",
    "# ~ 0.50 - 0.62\n",
    "# ~ 0.97 - 1.0\n",
    "\n",
    "# Example:\n",
    "#0.3657050132751465\n",
    "#0.3463745415210724\n",
    "#0.019330406561493874\n",
    "#0.5885359048843384\n",
    "#0.9974651336669922"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "gPtTGAP4usnm"
   },
   "source": [
    "## Analyze the Model Performance\n",
    "\n",
    "Note that the model has two outputs. The output at index 0 is quality and index 1 is wine type\n",
    "\n",
    "So, round the quality predictions to the nearest integer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "tBq9PEeAaW-Y"
   },
   "outputs": [],
   "source": [
    "predictions = model.predict(norm_test_X)\n",
    "quality_pred = predictions[0]\n",
    "type_pred = predictions[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "YLhgTR4xTIxj"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5.713439]\n"
     ]
    }
   ],
   "source": [
    "print(quality_pred[0])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# 5.6 - 6.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "MPi-eYfGTUXi"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.00022916]\n",
      "[0.9999958]\n"
     ]
    }
   ],
   "source": [
    "print(type_pred[0])\n",
    "print(type_pred[944])\n",
    "\n",
    "# EXPECTED OUTPUT\n",
    "# A number close to zero\n",
    "# A number close to or equal to 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Kohk-9C6vt_s"
   },
   "source": [
    "### Plot Utilities\n",
    "\n",
    "We define a few utilities to visualize the model performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "62gEOFUhn6aQ"
   },
   "outputs": [],
   "source": [
    "def plot_metrics(metric_name, title, ylim=5):\n",
    "    plt.title(title)\n",
    "    plt.ylim(0,ylim)\n",
    "    plt.plot(history.history[metric_name],color='blue',label=metric_name)\n",
    "    plt.plot(history.history['val_' + metric_name],color='green',label='val_' + metric_name)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "6rfgSx7uz5dj"
   },
   "outputs": [],
   "source": [
    "def plot_confusion_matrix(y_true, y_pred, title='', labels=[0,1]):\n",
    "    cm = confusion_matrix(y_true, y_pred)\n",
    "    fig = plt.figure()\n",
    "    ax = fig.add_subplot(111)\n",
    "    cax = ax.matshow(cm)\n",
    "    plt.title('Confusion matrix of the classifier')\n",
    "    fig.colorbar(cax)\n",
    "    ax.set_xticklabels([''] + labels)\n",
    "    ax.set_yticklabels([''] + labels)\n",
    "    plt.xlabel('Predicted')\n",
    "    plt.ylabel('True')\n",
    "    fmt = 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "          plt.text(j, i, format(cm[i, j], fmt),\n",
    "                  horizontalalignment=\"center\",\n",
    "                  color=\"black\" if cm[i, j] > thresh else \"white\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "dfVLIqi017Vf"
   },
   "outputs": [],
   "source": [
    "def plot_diff(y_true, y_pred, title = '' ):\n",
    "    plt.scatter(y_true, y_pred)\n",
    "    plt.title(title)\n",
    "    plt.xlabel('True Values')\n",
    "    plt.ylabel('Predictions')\n",
    "    plt.axis('equal')\n",
    "    plt.axis('square')\n",
    "    plt.plot([-100, 100], [-100, 100])\n",
    "    return plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8sd1jdFbwE0I"
   },
   "source": [
    "### Plots for Metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "f3MwZ5J1pOfj"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_metrics('wine_quality_root_mean_squared_error', 'RMSE', ylim=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "QIAxEezCppnd"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_metrics('wine_type_loss', 'Wine Type Loss', ylim=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "uYV9AOAMwI9p"
   },
   "source": [
    "### Plots for Confusion Matrix\n",
    "\n",
    "Plot the confusion matrices for wine type. You can see that the model performs well for prediction of wine type from the confusion matrix and the loss metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "C3hvTYxIaf3n"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_confusion_matrix(test_Y[1], np.round(type_pred), title='Wine Type', labels = [0, 1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "GW91ym8P2I5y"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "scatter_plot = plot_diff(test_Y[0], quality_pred, title='Type')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "include_colab_link": true,
   "name": "exercise-answer.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
